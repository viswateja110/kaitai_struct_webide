# Alternative Dockerfile using nginx for serving static files
# This is more lightweight for production deployments

# Stage 1: Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files and build scripts needed for installation
COPY package.json package-lock.json ./
COPY vendor.yaml ./
COPY vendor_build.js ./
COPY vendor_license.js ./

# Copy lib directory (needed by vendor_license.js during npm install)
COPY lib/ ./lib/

# Create docs/wiki directory (needed by vendor_license.js to write 3rd-party-libraries.md)
RUN mkdir -p docs/wiki

# Install dependencies (this will also run vendor_build.js via postinstall)
RUN npm ci

# Copy source files
COPY tsconfig.json tsconfig.worker.json tsconfig.playground.json ./
COPY tslint.json ./
COPY src/ ./src/
COPY genKaitaiFsFiles.js ./

# Compile TypeScript
RUN npx tsc

# Compile worker and playground
RUN npx tsc -p tsconfig.worker.json || true
RUN npx tsc -p tsconfig.playground.json || true

# Copy static assets
COPY css/ ./css/
COPY formats/ ./formats/
COPY samples/ ./samples/
COPY docs/ ./docs/
COPY index.html v2.html Playground.html github_oauth.html ./
COPY LICENSE LICENSE-3RD-PARTY.txt README.md ./

# Stage 2: Production stage with nginx
FROM nginx:alpine

# Copy nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Main location
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header Cache-Control "no-cache";
    }

    # Disable cache for HTML files
    location ~* \.html$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
}
EOF

# Copy built application from builder
COPY --from=builder /app /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

